#version 400 core

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

// Bayer matrix for 4x4 pattern
const mat4 bayerMatrix = mat4(
    1.0,  9.0,  3.0, 11.0,
   13.0,  5.0, 15.0,  7.0,
    4.0, 12.0,  2.0, 10.0,
   16.0,  8.0, 14.0,  6.0
);

void main(void){

    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(toLightVector);

    float nDotl = dot(unitNormal, unitLightVector);
    float brightness = max(nDotl, 1.0);
    vec3 diffuse = brightness * lightColour;

    vec3 unitVectorToCamera = normalize(toCameraVector);
    vec3 lightDirection = -unitLightVector;
    vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

    float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
    specularFactor = max(specularFactor, 0.0);
    float dampedFactor = pow(specularFactor, shineDamper);

    // Dithering specular color
    vec3 finalSpecular;
    float scaledX = gl_FragCoord.x / 0.5;
    float scaledY = gl_FragCoord.y / 0.5;
    if (dampedFactor > bayerMatrix[int(mod(scaledX, 4.0))][int(mod(scaledY, 4.0))] / 17.0) {
        finalSpecular = reflectivity * lightColour;
    } else {
        finalSpecular = vec3(0.0); // Black
    }

    vec4 textureColour = texture(modelTexture, pass_textureCoordinates);
    if (textureColour.a < 0.5) {
        discard;
    }

    out_Color = vec4(diffuse, 1.0) * texture(modelTexture, pass_textureCoordinates) + vec4(finalSpecular, 1.0);
    out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);
}
